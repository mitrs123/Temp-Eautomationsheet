const { google } = require('googleapis');
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
// const { parse } = require('date-fns')

// Load environment variables from .env file
dotenv.config();

const app = express();
const port = 3000;

// Google Sheets API credentials loaded from .env
const client_email = process.env.SERVICE_ACCOUNT_EMAIL;
let private_key = process.env.SERVICE_ACCOUNT_PRIVATE_KEY;
if (private_key.startsWith('"-----BEGIN PRIVATE KEY-----')) {
  private_key = JSON.parse(`{"key":${private_key}}`).key; // Remove escaped quotes
}

const project_id = process.env.PROJECT_ID;

// Google Sheets API version
const client = new google.auth.JWT(
  client_email,
  null,
  private_key,
  ['https://www.googleapis.com/auth/spreadsheets']
);

const sheets = google.sheets({ version: 'v4', auth: client });

// Sheet IDs
const SPREADSHEET_ID_MASTER = '1ZN4BOvovDxFyYz-AHVFnZB-cYrvL0s48E_oLijQojTs'; // Replace with your master sheet ID
const SPREADSHEET_ID_SALES1 = '159yCKypb4xdM0_ger3N6ls8lsT92Yob_0SIpCsnjBzQ'; // Replace with your sales1 sheet ID
const SPREADSHEET_ID_SALES2 = '1UFJ76nUv922KOiBxu7K2Tl8nTmNZ2fAWnFP05fxeOCI'; // Replace with your sales2 sheet ID
const SPREADSHEET_ID_SALES3 = '1KqJvOPZQsVEb26frQ32-3iyx-xW1fMgj0wNvCQH6tDo'; // Replace with your sales3 sheet ID

// Sales persons mapping
const SALES_PERSONS = {
  'UniqueId@1': { name: 'Sales Person 1', sheetId: SPREADSHEET_ID_SALES1 },
  'UniqueId@2': { name: 'Sales Person 2', sheetId: SPREADSHEET_ID_SALES2 },
  'UniqueId@3': { name: 'Sales Person 3', sheetId: SPREADSHEET_ID_SALES3 }
};

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Function to check for duplicate entries in a given sheet
const checkForDuplicate = async (sheetId, range, formData) => {
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: sheetId,
    range: range
  });

  const rows = response.data.values;
  const lastRows = rows.slice(-3); // Get the last 3 rows

  return lastRows.some(row => (
    row[1] === formData.timestamp.split(' ')[0] &&
    row[2] === formData.salesPersonName &&
    row[3] === formData.leadOrigin &&
    row[4] === formData.clientName &&
    row[5] === formData.expectedProjectCapacity &&
    row[6] === formData.projectType &&
    row[7] === formData.contactPersonName &&
    row[8] === formData.designation &&
    row[9] === formData.contactNumber &&
    row[10] === formData.contactNumber2 &&
    row[11] === formData.area &&
    row[12] === formData.city &&
    row[13] === formData.remarks
  ));
};

// Function to remove duplicate entries from a given sheet
const removeDuplicates = async (sheetId, range) => {
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: sheetId,
    range: range
  });

  const rows = response.data.values;
  const uniqueRows = [];
  const duplicateIndexes = [];

  rows.forEach((row, index) => {
    const rowString = JSON.stringify(row);
    if (uniqueRows.includes(rowString)) {
      duplicateIndexes.push(index + 1); // +1 because Sheets API is 1-indexed
    } else {
      uniqueRows.push(rowString);
    }
  });

  if (duplicateIndexes.length > 0) {
    await sheets.spreadsheets.batchUpdate({
      spreadsheetId: sheetId,
      resource: {
        requests: duplicateIndexes.map(rowIndex => ({
          deleteDimension: {
            range: {
              sheetId: 0,
              dimension: 'ROWS',
              startIndex: rowIndex - 1,
              endIndex: rowIndex
            }
          }
        }))
      }
    });
  }
};

// Handle form submission
app.post('/form-data', async (req, res) => {
  console.log("end point called")
  const formData = req.body;
  const salesPersonInfo = SALES_PERSONS[formData.uniqueID];
  if (!salesPersonInfo) {
    res.status(400).send('Invalid sales person unique ID.');
    return;
  }
  formData.salesPersonName = salesPersonInfo.name;

  try {
    // Check for duplicates in the master sheet
    const isDuplicateInMaster = await checkForDuplicate(
      SPREADSHEET_ID_MASTER,
      'Sheet1!A:N',
      formData
    );

    // Check for duplicates in the sales person's sheet
    const salesSheetId = salesPersonInfo.sheetId;
    const isDuplicateInSales = await checkForDuplicate(
      salesSheetId,
      'Sheet1!A:N',
      formData
    );

    if (isDuplicateInMaster || isDuplicateInSales) {
      res.status(400).send('Duplicate entry found.');
      return;
    }

    // No duplicates found, append the data
    const masterSheetResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID_MASTER,
      range: 'Sheet1!A:N'
    });

    const rows = masterSheetResponse.data.values;
    const newSequenceNumber = rows.length > 1 ? parseInt(rows[rows.length - 1][0]) + 1 : 1;
  //   console.log("form date",formData.date)
  //   const date = formData.timestamp.split(' ')[0];
  //   console.log(date)

  // //   function extractDate(dateString) {
  // //     // Split the date string at the first space
  // //     const datePart = dateString.split(' ')[0];
      
  // //     // Parse the date part to create a Date object
  // //     // Note: Date format is assumed to be MM/dd/yyyy, adjust as needed
  // //     const parsedDate = parse(datePart, 'M/d/yyyy', new Date());
  // //     // Return the Date object
  // //     return parsedDate;
  // // }

    // const dateObj = formData.timestamp
    // const dateOnly = dateObj.toLocaleDateString("en-IN");

    // const dateOnlyString = new Date(formData.timestamp).toISOString().split('T')[0];

    const dateObj = new Date(formData.timestamp);

// Extract date components
const day = dateObj.getDate().toString().padStart(2, '0');
const month = (dateObj.getMonth() + 1).toString().padStart(2, '0'); // Month is zero-based
const year = dateObj.getFullYear().toString();

// Format date in dd-mm-yyyy format
const formattedDate = `${day}-${month}-${year}`;

    const newRow = [
      newSequenceNumber,
      formattedDate,
      formData.salesPersonName,
      formData.leadOrigin,
      formData.clientName,
      +formData.expectedProjectCapacity,
      formData.projectType,
      formData.contactPersonName,
      formData.designation,
      +formData.contactNumber,
      +formData.contactNumber2,
      formData.area,
      formData.city,
      formData.remarks
    ];

    // Append to master sheet
    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID_MASTER,
      range: 'Sheet1!A:N',
      valueInputOption: 'RAW',
      resource: {
        values: [newRow]
      }
    });
    console.log("add Data:",newRow);

    // Append to specific sales person's sheet
    await sheets.spreadsheets.values.append({
      spreadsheetId: salesSheetId,
      range: 'Sheet1!A:N', // Ensure the range includes all columns including Sales Person Name
      valueInputOption: 'RAW',
      resource: {
        values: [newRow]
      }
    });

    // Check for and remove any duplicates after insertion
    await removeDuplicates(SPREADSHEET_ID_MASTER, 'Sheet1!A:N');
    await removeDuplicates(salesSheetId, 'Sheet1!A:N');

    res.status(200).send('Form data received and processed successfully');
  } catch (error) {
    console.error('Error processing form data:', error);
    res.status(500).send('Error processing form data');
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Express server listening at http://localhost:${port}`);
});






// // const { google } = require('googleapis');
// // const express = require('express');
// // const bodyParser = require('body-parser');
// // const cors = require('cors');
// // const dotenv = require('dotenv');

// // // Load environment variables from .env file
// // dotenv.config();

// // const app = express();
// // const port = 3000;

// // // Google Sheets API credentials loaded from .env
// // const client_email = process.env.SERVICE_ACCOUNT_EMAIL;
// // const private_key = process.env.SERVICE_ACCOUNT_PRIVATE_KEY.replace(/\\n/g, '\n');
// // const project_id = process.env.PROJECT_ID;

// // // Google Sheets API version
// // const client = new google.auth.JWT(
// //   client_email,
// //   null,
// //   private_key,
// //   ['https://www.googleapis.com/auth/spreadsheets']
// // );

// // const sheets = google.sheets({ version: 'v4', auth: client });

// // // Sheet IDs
// // const SPREADSHEET_ID_MASTER = '1ZN4BOvovDxFyYz-AHVFnZB-cYrvL0s48E_oLijQojTs'; // Replace with your master sheet ID
// // const SPREADSHEET_ID_SALES1 = '159yCKypb4xdM0_ger3N6ls8lsT92Yob_0SIpCsnjBzQ'; // Replace with your sales1 sheet ID
// // const SPREADSHEET_ID_SALES2 = '1UFJ76nUv922KOiBxu7K2Tl8nTmNZ2fAWnFP05fxeOCI'; // Replace with your sales2 sheet ID
// // const SPREADSHEET_ID_SALES3 = '1KqJvOPZQsVEb26frQ32-3iyx-xW1fMgj0wNvCQH6tDo'; // Replace with your sales3 sheet ID

// // // Sales persons mapping
// // const SALES_PERSONS = {
// //   'UniqueId@1': { name: 'Sales Person 1', sheetId: SPREADSHEET_ID_SALES1 },
// //   'UniqueId@2': { name: 'Sales Person 2', sheetId: SPREADSHEET_ID_SALES2 },
// //   'UniqueId@3': { name: 'Sales Person 3', sheetId: SPREADSHEET_ID_SALES3 }
// // };

// // // Middleware
// // app.use(cors());
// // app.use(bodyParser.json());

// // // Function to check for duplicate entries in a given sheet
// // const checkForDuplicate = async (sheetId, range, formData) => {
// //   const response = await sheets.spreadsheets.values.get({
// //     spreadsheetId: sheetId,
// //     range: range
// //   });

// //   const rows = response.data.values;
// //   const lastRows = rows.slice(-3); // Get the last 3 rows

// //   return lastRows.some(row => (
// //     row[1] === formData.timestamp.split(' ')[0] &&
// //     row[2] === formData.salesPersonName &&
// //     row[3] === formData.leadOrigin &&
// //     row[4] === formData.clientName &&
// //     row[5] === formData.expectedProjectCapacity &&
// //     row[6] === formData.projectType &&
// //     row[7] === formData.contactPersonName &&
// //     row[8] === formData.designation &&
// //     row[9] === formData.contactNumber &&
// //     row[10] === formData.contactNumber2 &&
// //     row[11] === formData.area &&
// //     row[12] === formData.city &&
// //     row[13] === formData.remarks
// //   ));
// // };

// // // Handle form submission
// // app.post('/form-data', async (req, res) => {
// //   const formData = req.body;
// //   const salesPersonInfo = SALES_PERSONS[formData.uniqueID];
// //   if (!salesPersonInfo) {
// //     res.status(400).send('Invalid sales person unique ID.');
// //     return;
// //   }
// //   formData.salesPersonName = salesPersonInfo.name;

// //   try {
// //     // Check for duplicates in the master sheet
// //     const isDuplicateInMaster = await checkForDuplicate(
// //       SPREADSHEET_ID_MASTER,
// //       'Sheet1!A:N',
// //       formData
// //     );

// //     if (isDuplicateInMaster) {
// //       res.status(400).send('Duplicate entry found in master sheet.');
// //       return;
// //     }

// //     // Check for duplicates in the sales person's sheet
// //     const salesSheetId = salesPersonInfo.sheetId;
// //     const isDuplicateInSales = await checkForDuplicate(
// //       salesSheetId,
// //       'Sheet1!A:N',
// //       formData
// //     );

// //     if (isDuplicateInSales) {
// //       res.status(400).send('Duplicate entry found in sales person sheet.');
// //       return;
// //     }

// //     // No duplicates found, append the data
// //     const masterSheetResponse = await sheets.spreadsheets.values.get({
// //       spreadsheetId: SPREADSHEET_ID_MASTER,
// //       range: 'Sheet1!A:N'
// //     });

// //     const rows = masterSheetResponse.data.values;
// //     const newSequenceNumber = rows.length > 1 ? parseInt(rows[rows.length - 1][0]) + 1 : 1;
// //     const date = formData.timestamp.split(' ')[0];

// //     const newRow = [
// //       newSequenceNumber,
// //       date,
// //       formData.salesPersonName,
// //       formData.leadOrigin,
// //       formData.clientName,
// //       formData.expectedProjectCapacity,
// //       formData.projectType,
// //       formData.contactPersonName,
// //       formData.designation,
// //       formData.contactNumber,
// //       formData.contactNumber2,
// //       formData.area,
// //       formData.city,
// //       formData.remarks
// //     ];

// //     // Append to master sheet
// //     await sheets.spreadsheets.values.append({
// //       spreadsheetId: SPREADSHEET_ID_MASTER,
// //       range: 'Sheet1!A:N',
// //       valueInputOption: 'RAW',
// //       resource: {
// //         values: [newRow]
// //       }
// //     });

// //     // Append to specific sales person's sheet
// //     await sheets.spreadsheets.values.append({
// //       spreadsheetId: salesSheetId,
// //       range: 'Sheet1!A:N', // Ensure the range includes all columns including Sales Person Name
// //       valueInputOption: 'RAW',
// //       resource: {
// //         values: [newRow]
// //       }
// //     });

// //     res.status(200).send('Form data received and processed successfully');
// //   } catch (error) {
// //     console.error('Error processing form data:', error);
// //     res.status(500).send('Error processing form data');
// //   }
// // });

// // // Start the server
// // app.listen(port, () => {
// //   console.log(`Express server listening at http://localhost:${port}`);
// // });


// const { google } = require('googleapis');
// const express = require('express');
// const bodyParser = require('body-parser');
// const cors = require('cors');
// const dotenv = require('dotenv');

// // Load environment variables from .env file
// dotenv.config();

// const app = express();
// const port = 3000;

// // Google Sheets API credentials loaded from .env
// const client_email = process.env.SERVICE_ACCOUNT_EMAIL;
// let private_key = process.env.SERVICE_ACCOUNT_PRIVATE_KEY;
// if (private_key.startsWith('"-----BEGIN PRIVATE KEY-----')) {
//   private_key = JSON.parse(`{"key":${private_key}}`).key; // Remove escaped quotes
// }

// const project_id = process.env.PROJECT_ID;

// // Google Sheets API version
// const client = new google.auth.JWT(
//   client_email,
//   null,
//   private_key,
//   ['https://www.googleapis.com/auth/spreadsheets']
// );

// const sheets = google.sheets({ version: 'v4', auth: client });

// // Sheet IDs
// const SPREADSHEET_ID_MASTER = '1ZN4BOvovDxFyYz-AHVFnZB-cYrvL0s48E_oLijQojTs'; // Replace with your master sheet ID
// const SPREADSHEET_ID_SALES1 = '159yCKypb4xdM0_ger3N6ls8lsT92Yob_0SIpCsnjBzQ'; // Replace with your sales1 sheet ID
// const SPREADSHEET_ID_SALES2 = '1UFJ76nUv922KOiBxu7K2Tl8nTmNZ2fAWnFP05fxeOCI'; // Replace with your sales2 sheet ID
// const SPREADSHEET_ID_SALES3 = '1KqJvOPZQsVEb26frQ32-3iyx-xW1fMgj0wNvCQH6tDo'; // Replace with your sales3 sheet ID

// // Sales persons mapping
// const SALES_PERSONS = {
//   'UniqueId@1': { name: 'Sales Person 1', sheetId: SPREADSHEET_ID_SALES1 },
//   'UniqueId@2': { name: 'Sales Person 2', sheetId: SPREADSHEET_ID_SALES2 },
//   'UniqueId@3': { name: 'Sales Person 3', sheetId: SPREADSHEET_ID_SALES3 }
// };

// // Middleware
// app.use(cors());
// app.use(bodyParser.json());

// // Function to check for duplicate entries in a given sheet
// const checkForDuplicate = async (sheetId, range, formData) => {
//   const response = await sheets.spreadsheets.values.get({
//     spreadsheetId: sheetId,
//     range: range
//   });

//   const rows = response.data.values;
//   const lastRows = rows.slice(-3); // Get the last 3 rows

//   return lastRows.some(row => (
//     row[1] === formData.timestamp.split(' ')[0] &&
//     row[2] === formData.salesPersonName &&
//     row[3] === formData.leadOrigin &&
//     row[4] === formData.clientName &&
//     row[5] === formData.expectedProjectCapacity &&
//     row[6] === formData.projectType &&
//     row[7] === formData.contactPersonName &&
//     row[8] === formData.designation &&
//     row[9] === formData.contactNumber &&
//     row[10] === formData.contactNumber2 &&
//     row[11] === formData.area &&
//     row[12] === formData.city &&
//     row[13] === formData.remarks
//   ));
// };

// // Handle form submission
// app.post('/form-data', async (req, res) => {
//   const formData = req.body;
//   const salesPersonInfo = SALES_PERSONS[formData.uniqueID];
//   if (!salesPersonInfo) {
//     res.status(400).send('Invalid sales person unique ID.');
//     return;
//   }
//   formData.salesPersonName = salesPersonInfo.name;

//   try {
//     // Check for duplicates in the master sheet
//     const isDuplicateInMaster = await checkForDuplicate(
//       SPREADSHEET_ID_MASTER,
//       'Sheet1!A:N',
//       formData
//     );

//     if (isDuplicateInMaster) {
//       res.status(400).send('Duplicate entry found in master sheet.');
//       return;
//     }

//     // Check for duplicates in the sales person's sheet
//     const salesSheetId = salesPersonInfo.sheetId;
//     const isDuplicateInSales = await checkForDuplicate(
//       salesSheetId,
//       'Sheet1!A:N',
//       formData
//     );

//     if (isDuplicateInSales) {
//       res.status(400).send('Duplicate entry found in sales person sheet.');
//       return;
//     }

//     // No duplicates found, append the data
//     const masterSheetResponse = await sheets.spreadsheets.values.get({
//       spreadsheetId: SPREADSHEET_ID_MASTER,
//       range: 'Sheet1!A:N'
//     });

//     const rows = masterSheetResponse.data.values;
//     const newSequenceNumber = rows.length > 1 ? parseInt(rows[rows.length - 1][0]) + 1 : 1;
//     const date = formData.timestamp.split(' ')[0];

//     const newRow = [
//       newSequenceNumber,
//       date,
//       formData.salesPersonName,
//       formData.leadOrigin,
//       formData.clientName,
//       formData.expectedProjectCapacity,
//       formData.projectType,
//       formData.contactPersonName,
//       formData.designation,
//       formData.contactNumber,
//       formData.contactNumber2,
//       formData.area,
//       formData.city,
//       formData.remarks
//     ];

//     // Append to master sheet
//     await sheets.spreadsheets.values.append({
//       spreadsheetId: SPREADSHEET_ID_MASTER,
//       range: 'Sheet1!A:N',
//       valueInputOption: 'RAW',
//       resource: {
//         values: [newRow]
//       }
//     });

//     // Append to specific sales person's sheet
//     await sheets.spreadsheets.values.append({
//       spreadsheetId: salesSheetId,
//       range: 'Sheet1!A:N', // Ensure the range includes all columns including Sales Person Name
//       valueInputOption: 'RAW',
//       resource: {
//         values: [newRow]
//       }
//     });

//     res.status(200).send('Form data received and processed successfully');
//   } catch (error) {
//     console.error('Error processing form data:', error);
//     res.status(500).send('Error processing form data');
//   }
// });

// // Start the server
// app.listen(port, () => {
//   console.log(`Express server listening at http://localhost:${port}`);
// });
